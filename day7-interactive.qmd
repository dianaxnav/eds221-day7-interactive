---
title: "Morning session"
format: html
editor: visual
execute:
  warning: TRUE
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(datapasta)
```

## Data wrangling refresher

1.  Starting from penguins, write a single piped seq in which:
    1.  only include penguins at dream and biscoe islands
    2.  remove the year and sex variables
    3.  add a new column body_mass_kg w penguin mass converted from g to kg
    4.  rename the island variable to location

```{r}
dream_biscoe <- penguins %>% 
  filter(island %in% c("Dream", "Biscoe")) %>% 
  select(-year, -sex) %>% 
  mutate(body_mass_kg = body_mass_g / 1000) %>% 
  rename(location = island)
```

2.  Write a single piped sequence to:
    2.  limit to Adelie penguins
    3.  Remove any observations where flipper_length_mm is NA (lis.na()) or drop_na)
    4.  Group the data by sex
    5.  Create a summary table that contains the mean, std, and sample size of flipper length for male and female Adelie penguins

```{r}
deli_sum <- penguins %>% 
  filter(species == "Adelie", !is.na(flipper_length_mm)) %>% 
  group_by(sex) %>% 
  summarise(mean_flipper = mean(flipper_length_mm), 
            sd(flipper_length_mm),
            sample_size = n())
```

```{r}
penguins %>% 
  group_by(species, island, sex) %>% 
  summarize(sample_size = n())

#Count is just wrapping together group_by + summarize  + n() to get counts of observations
penguins %>% 
  count(species, island, sex)
```

```{r}
#NOT REPRODUCABLE
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

```{r}
#Most conservative join
full_join_example <- full_join(animals, sites)
```

```{r}
#Left join example(keeps everything in left table, and only keep right table if it has exact match for key value)
left_join_example <- left_join(animals, sites)
```

```{r}
inner_join_examples <- inner_join(animals, sites)
```

## Date/Times with lubridate()

ymd: if date is in year-month-day

mdy: if date is in month-day-year

dmy: if date is in day-month-year

```{r}
my_date_1 <- lubridate::mdy("03-15-1998")

class(my_date_1)

my_date_2 <- lubridate::mdy("11/7/2003")

class(my_date_2)

my_date_3 <- lubridate::dmy("08-Jun-1974")

my_date_3

my_date_4 <- lubridate::ymd("19740606")

my_date_4
```

Can we break the lubridate parsing function?

```{r}
my_date_5 <- lubridate::dmy("05062012")

my_date_5
```

Adding time to our dates

```{r}
time_1 <- lubridate::ymd_hm("2020-06-13 11:18")

time_1

#Parse June 2, 1982 at 4pm UTC (16:00) as a date in R.
time_2 <- lubridate::dmy_hm("02061982 16:00")

time_2


```

```{r}
with_tz(time_2, "America/Los_Angeles")

with_tz(time_2, "America/New_York")
```

```{r}
now <- with_tz(Sys.time(), "Europe/Belgrade")

now
```

Access different parts of date-times

```{r}
later <- lubridate::day(now)

tomorrow <- lubridate::week(now)

minute2 <- lubridate::minute(now)

later
tomorrow
minute2
```

```{r}
urchin_counts <- data.frame(
  date = c("Oct 12, 2004", "October 18, 2007", "February 12, 2003", "Feb 14, 2008"),
  species = c("purple", "red", "red", 'red'),
  size_mm = c(19, 24, 18, 11)
)
```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  mutate(month = lubridate::month(date)) %>% 
  group_by(month) %>% 
  summarise(mean_size = mean(size_mm))

```

## Strings with stringr 

```{r}
#Use str_detect to detect a string pattern

my_string <- "Teddy loves sammon and kibble and toys"

str_detect(my_string, pattern = "sammon")
```

```{r}
str_detect(my_string, "hot weather")
```

```{r}
my_string_2 <- c("burrito", "fish taco", "taco_salad", "super-bUrrito")

str_detect(my_string_2, pattern = "taco")
```

```{r}
starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))
```

```{r}
starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replace = "Fire"))
```

str_trim to get rid of leading and trailing white space

str_squish to get rid of leading and trailing white space AND excess interior white space

```{r}
my_string_3 <- "     Hi my name        is Teddy !!!!!      "
```

```{r}
str_trim(my_string_3)
str_squish(my_string_3)
```

```{r}
starwars %>% 
  mutate(species_lower = str_to_lower(species))
```
